// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrganizationTrackingApplicationData;

#nullable disable

namespace OrganizationTrackingApplicationData.Migrations
{
    [DbContext(typeof(OrganizationTrackingApplicationDbContext))]
    [Migration("20240509062742_OrganizatorPropertyAddedForUser")]
    partial class OrganizatorPropertyAddedForUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Domain.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Credit")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Entities.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizatorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Entities.Domain.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("154e605e-afc8-4f0a-9abf-07aaa0b1fef3"),
                            CreatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3556),
                            IsDeleted = false,
                            Name = "Concert",
                            UpdatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3569)
                        },
                        new
                        {
                            Id = new Guid("7b5dc9ee-433e-4dca-8b25-5b2911caf1eb"),
                            CreatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3586),
                            IsDeleted = false,
                            Name = "Carnival",
                            UpdatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3586)
                        },
                        new
                        {
                            Id = new Guid("f7010d6e-643a-4c0c-85dc-a10af453699c"),
                            CreatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3590),
                            IsDeleted = false,
                            Name = "Festival",
                            UpdatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3590)
                        },
                        new
                        {
                            Id = new Guid("53c4dcb0-da06-4e1b-bc4a-bcf2eeae22c6"),
                            CreatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3593),
                            IsDeleted = false,
                            Name = "Meeting",
                            UpdatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3593)
                        },
                        new
                        {
                            Id = new Guid("1d3c2a0c-6023-42d1-8b7a-6fdd49f4ca49"),
                            CreatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3608),
                            IsDeleted = false,
                            Name = "Activity",
                            UpdatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3608)
                        },
                        new
                        {
                            Id = new Guid("a3bf1923-6699-4c4b-90d8-ef06cecfe33f"),
                            CreatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3612),
                            IsDeleted = false,
                            Name = "Trip",
                            UpdatedDate = new DateTime(2024, 5, 9, 9, 27, 41, 758, DateTimeKind.Local).AddTicks(3613)
                        });
                });

            modelBuilder.Entity("Entities.Domain.Follow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FollowedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Entities.Domain.Friend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FriendOneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendTwoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FriendOneId");

                    b.HasIndex("FriendTwoId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Entities.Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormattedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Entities.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entities.Domain.Organizator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Organizators");
                });

            modelBuilder.Entity("Entities.Domain.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Entities.Domain.Rules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Rule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("Entities.Domain.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Entities.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Domain.Balance", b =>
                {
                    b.HasOne("Entities.Domain.User", "User")
                        .WithOne("Balance")
                        .HasForeignKey("Entities.Domain.Balance", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Domain.Event", b =>
                {
                    b.HasOne("Entities.Domain.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Domain.Organizator", "Organizator")
                        .WithMany("Events")
                        .HasForeignKey("OrganizatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("Location");

                    b.Navigation("Organizator");
                });

            modelBuilder.Entity("Entities.Domain.Follow", b =>
                {
                    b.HasOne("Entities.Domain.User", "Followed")
                        .WithMany("Followeds")
                        .HasForeignKey("FollowedId");

                    b.HasOne("Entities.Domain.User", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Entities.Domain.Friend", b =>
                {
                    b.HasOne("Entities.Domain.User", "FriendOne")
                        .WithMany("FriendOnes")
                        .HasForeignKey("FriendOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Domain.User", "FriendTwo")
                        .WithMany("FriendTwos")
                        .HasForeignKey("FriendTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FriendOne");

                    b.Navigation("FriendTwo");
                });

            modelBuilder.Entity("Entities.Domain.Notification", b =>
                {
                    b.HasOne("Entities.Domain.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Domain.Organizator", b =>
                {
                    b.HasOne("Entities.Domain.User", "User")
                        .WithOne("Organizator")
                        .HasForeignKey("Entities.Domain.Organizator", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Domain.Rating", b =>
                {
                    b.HasOne("Entities.Domain.Event", "Event")
                        .WithMany("Ratings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Domain.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Domain.Rules", b =>
                {
                    b.HasOne("Entities.Domain.Event", "Event")
                        .WithMany("Rules")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Entities.Domain.Ticket", b =>
                {
                    b.HasOne("Entities.Domain.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Domain.User", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Event");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Entities.Domain.Event", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Rules");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Entities.Domain.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Entities.Domain.Location", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Entities.Domain.Organizator", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Entities.Domain.User", b =>
                {
                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("Followeds");

                    b.Navigation("Followers");

                    b.Navigation("FriendOnes");

                    b.Navigation("FriendTwos");

                    b.Navigation("Notifications");

                    b.Navigation("Organizator")
                        .IsRequired();

                    b.Navigation("Ratings");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
